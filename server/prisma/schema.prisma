// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para roles de usuario
enum UserRole {
  ADMIN     // Administrador total (tú) - puede gestionar todo
  MANAGER   // Administrador de equipo - puede gestionar jugadores y partidos
  VIEWER    // Puede ver estadísticas y sumarse a convocatorias
}

// Usuario que es también jugador
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  nickname  String?
  password  String
  role      UserRole @default(VIEWER)  // Por defecto VIEWER
  
  // Campos de jugador (ahora parte del User)
  position  String?  // "Defensor", "Mediocampista", "Delantero", "Arquero"
  isActive  Boolean  @default(true)
  
  // Torneo/Sala actual
  tournamentId String?
  tournament   Tournament? @relation("TournamentMembers", fields: [tournamentId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  matches Match[]  // Partidos que organizó
  callUpResponses CallUpResponse[]  // Sus respuestas a convocatorias
  createdCallUps  CallUp[]  // Convocatorias que creó
  
  // Participaciones en partidos (como jugador)
  matchPlayers MatchPlayer[]
  
  // Estadísticas como jugador
  playerStats PlayerStats[]
  
  // Torneos creados (como ADMIN)
  createdTournaments Tournament[] @relation("TournamentCreator")

  @@map("users")
}

// Torneos/Salas - El concepto principal de agrupación
model Tournament {
  id          String   @id @default(cuid())
  name        String   // "Liga Barrio Norte 2025"
  description String?  // Descripción opcional
  shareCode   String   @unique @default(cuid()) // Código para compartir (más corto que el ID)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  createdById String
  createdBy   User   @relation("TournamentCreator", fields: [createdById], references: [id])
  
  // Miembros del torneo
  members     User[] @relation("TournamentMembers")
  
  // Partidos del torneo
  matches     Match[]
  
  // Convocatorias del torneo
  callUps     CallUp[]

  @@map("tournaments")
}

// Partidos
model Match {
  id          String    @id @default(cuid())
  date        DateTime
  team1Name   String    @default("Equipo 1")
  team2Name   String    @default("Equipo 2")
  team1Goals  Int       @default(0)
  team2Goals  Int       @default(0)
  isFinished  Boolean   @default(false)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tournamentId String?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  // Jugadores participantes
  matchPlayers MatchPlayer[]
  
  // Estadísticas del partido
  playerStats PlayerStats[]

  @@map("matches")
}

// Relación many-to-many entre usuarios/jugadores y partidos
model MatchPlayer {
  id     String @id @default(cuid())
  team   Int    // 1 o 2 para indicar en qué equipo jugó
  
  // Relaciones
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  matchId String
  match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([userId, matchId])
  @@map("match_players")
}

// Estadísticas individuales por usuario/jugador en cada partido
model PlayerStats {
  id         String @id @default(cuid())
  goals      Int    @default(0)
  assists    Int    @default(0)
  yellowCards Int   @default(0)
  redCards   Int    @default(0)
  
  // Relaciones
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  matchId String
  match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([userId, matchId])
  @@map("player_stats")
}

// Convocatorias para partidos (como la lista de WhatsApp)
model CallUp {
  id          String    @id @default(cuid())
  title       String    // "Futbol en Banade - Lunes (fecha) - (hora)"
  description String?   // Descripción adicional
  matchDate   DateTime  // Fecha y hora del partido
  location    String?   // Lugar del partido
  maxPlayers  Int?      // Límite de jugadores (opcional)
  isOpen      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  
  tournamentId String?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  
  responses   CallUpResponse[]

  @@map("call_ups")
}

// Respuestas a las convocatorias (quien se apunta)
model CallUpResponse {
  id        String   @id @default(cuid())
  position  Int      // Posición en la lista (1, 2, 3, etc.)
  message   String?  // Mensaje opcional del usuario
  createdAt DateTime @default(now())
  
  // Relaciones
  callUpId String
  callUp   CallUp @relation(fields: [callUpId], references: [id], onDelete: Cascade)
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([callUpId, userId]) // Un usuario solo puede responder una vez por convocatoria
  @@unique([callUpId, position]) // Una posición solo puede estar ocupada por un usuario
  @@map("call_up_responses")
}
