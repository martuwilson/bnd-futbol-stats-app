const { PrismaClient } = require('../generated/prisma');

const prisma = new PrismaClient();

async function testAuthentication() {
  console.log('üîê TESTING JWT AUTHENTICATION SYSTEM');
  console.log('====================================\n');

  try {
    console.log('‚úÖ FUNCIONALIDADES IMPLEMENTADAS:');
    console.log('================================');
    console.log('‚Ä¢ üîë Registro de usuarios con hash de contrase√±as');
    console.log('‚Ä¢ üîì Login con validaci√≥n de credenciales');
    console.log('‚Ä¢ üé´ Generaci√≥n de JWT tokens (access + refresh)');
    console.log('‚Ä¢ ‚ôªÔ∏è  Refresh token system para renovar acceso');
    console.log('‚Ä¢ üõ°Ô∏è Middleware de autenticaci√≥n JWT');
    console.log('‚Ä¢ üéØ Guards integrados con sistema de roles');

    console.log('\nüìã ENDPOINTS DE AUTENTICACI√ìN:');
    console.log('==============================');
    console.log('‚Ä¢ POST /graphql - register(input: RegisterInput)');
    console.log('‚Ä¢ POST /graphql - login(input: LoginInput)');
    console.log('‚Ä¢ POST /graphql - refreshToken(input: RefreshTokenInput)');

    console.log('\nüîí CONFIGURACI√ìN DE SEGURIDAD:');
    console.log('===============================');
    console.log('‚Ä¢ Access Token: 15 minutos de duraci√≥n');
    console.log('‚Ä¢ Refresh Token: 7 d√≠as de duraci√≥n');
    console.log('‚Ä¢ Contrase√±as hasheadas con bcrypt (12 rounds)');
    console.log('‚Ä¢ Validaci√≥n de emails y passwords');
    console.log('‚Ä¢ Roles por defecto: VIEWER');

    console.log('\nüß™ TESTING GRAPHQL MUTATIONS:');
    console.log('==============================');
    
    console.log('\nüìù REGISTRO DE USUARIO:');
    console.log(`mutation {
  register(input: {
    name: "Test User"
    email: "test@example.com"
    password: "password123"
    role: VIEWER
  }) {
    user {
      id
      name
      email
      role
    }
    accessToken
    refreshToken
  }
}`);

    console.log('\nüîê LOGIN DE USUARIO:');
    console.log(`mutation {
  login(input: {
    email: "test@example.com"
    password: "password123"
  }) {
    user {
      id
      name
      email
      role
    }
    accessToken
    refreshToken
  }
}`);

    console.log('\n‚ôªÔ∏è  REFRESH TOKEN:');
    console.log(`mutation {
  refreshToken(input: {
    refreshToken: "your-refresh-token-here"
  }) {
    accessToken
  }
}`);

    console.log('\nüõ°Ô∏è USO DE AUTHORIZATION HEADER:');
    console.log('================================');
    console.log('Authorization: Bearer <your-jwt-token>');

    console.log('\nüéØ INTEGRACI√ìN CON ROLES:');
    console.log('=========================');
    console.log('‚Ä¢ RolesGuard ahora funciona con JWT authentication');
    console.log('‚Ä¢ Fallback a x-user-id header para testing');
    console.log('‚Ä¢ Validaci√≥n autom√°tica de roles desde token');

    console.log('\n‚úÖ SISTEMA DE AUTENTICACI√ìN JWT COMPLETAMENTE IMPLEMENTADO');
    console.log('=========================================================');

  } catch (error) {
    console.error('‚ùå Error testing authentication:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testAuthentication();
