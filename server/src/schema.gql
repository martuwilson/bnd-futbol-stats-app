# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddPlayerToMatchInput {
  team: Int!
  userId: String!
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type CallUp {
  createdAt: DateTime!
  createdBy: User!
  createdById: String!
  description: String
  id: ID!
  isOpen: Boolean!
  location: String
  matchDate: DateTime!
  maxPlayers: Int
  responses: [CallUpResponse!]!
  title: String!
  updatedAt: DateTime!
}

type CallUpResponse {
  callUp: CallUp!
  callUpId: String!
  createdAt: DateTime!
  id: ID!
  message: String
  position: Int!
  user: User!
  userId: String!
}

type ComparisonStatistics {
  scoreDifference: Float!
  user1: User!
  user1Stats: PlayerStatistics!
  user2: User!
  user2Stats: PlayerStatistics!
  winner: String!
}

input CreateCallUpInput {
  createdById: String!
  description: String
  location: String
  matchDate: String!
  maxPlayers: Int
  title: String!
}

input CreateMatchInput {
  date: String!
  notes: String
  team1Name: String
  team2Name: String
  userId: String!
}

input CreateUserInput {
  email: String!
  name: String!
  nickname: String
  password: String!
  position: Position
  role: UserRole
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input JoinCallUpInput {
  callUpId: String!
  message: String
  userId: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Match {
  createdAt: DateTime!
  date: DateTime!
  id: ID!
  isFinished: Boolean!
  matchPlayers: [MatchPlayer!]
  notes: String
  playerStats: [PlayerStats!]
  team1Goals: Int!
  team1Name: String!
  team2Goals: Int!
  team2Name: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input MatchAnalysisInput {
  matchId: String!
}

type MatchPlayer {
  id: ID!
  matchId: String!
  team: Int!
  user: User!
  userId: String!
}

type MatchStatistics {
  date: DateTime!
  matchId: String!
  mvp: User
  team1Goals: Int!
  team1Name: String!
  team2Goals: Int!
  team2Name: String!
  totalAssists: Int!
  totalCards: Int!
  totalGoals: Int!
}

type Mutation {
  addPlayerToMatch(data: AddPlayerToMatchInput!, matchId: String!): Match!
  closeCallUp(id: String!): CallUp!
  createCallUp(data: CreateCallUpInput!): CallUp!
  createMatch(data: CreateMatchInput!): Match!
  createUser(data: CreateUserInput!): User!
  deleteCallUp(id: String!): Boolean!
  deleteMatch(id: String!): Boolean!
  deleteUser(id: String!): Boolean!
  joinCallUp(data: JoinCallUpInput!): CallUp!
  leaveCallUp(callUpId: String!, userId: String!): CallUp!
  login(input: LoginInput!): AuthResponse!
  makeUserAdmin(userId: String!): User!
  refreshToken(input: RefreshTokenInput!): RefreshResponse!
  register(input: RegisterInput!): AuthResponse!
  removePlayerFromMatch(matchId: String!, userId: String!): Match!
  updateCallUp(data: UpdateCallUpInput!, id: String!): CallUp!
  updateMatch(data: UpdateMatchInput!, id: String!): Match!
  updatePlayerStats(data: UpdatePlayerStatsInput!, matchId: String!): Boolean!
  updateUser(data: UpdateUserInput!, id: String!): User!
}

input PlayerComparisonInput {
  endDate: String
  startDate: String
  userId1: String!
  userId2: String!
}

type PlayerStatistics {
  assistsPerMatch: Float!
  effectivenessRating: Float!
  goalsPerMatch: Float!
  totalAssists: Int!
  totalGoals: Int!
  totalMatches: Int!
  totalRedCards: Int!
  totalYellowCards: Int!
  user: User!
}

type PlayerStats {
  assists: Int!
  goals: Int!
  id: ID!
  matchId: String!
  redCards: Int!
  user: User!
  userId: String!
  yellowCards: Int!
}

"""Las posiciones disponibles para los jugadores"""
enum Position {
  DEFENDER
  FORWARD
  GOALKEEPER
  MIDFIELDER
}

type PositionStatistics {
  averageAssists: Float!
  averageGoals: Float!
  playerCount: Int!
  position: String!
  topPerformers: [PlayerStatistics!]!
}

type Query {
  activeCallUps: [CallUp!]!
  admins: [User!]!
  callUp(id: String!): CallUp
  callUps: [CallUp!]!
  comparePlayersStatistics(input: PlayerComparisonInput!): ComparisonStatistics!
  isAdmin(userId: String!): Boolean!
  match(id: String!): Match
  matchAnalysis(input: MatchAnalysisInput!): MatchStatistics!
  matches: [Match!]!
  matchesByUser(userId: String!): [Match!]!
  me(userId: String!): User!
  mostActivePlayersPlayers(limit: Float = 10): [PlayerStatistics!]!
  playerStatistics(filter: StatisticsFilterInput, userId: String!): PlayerStatistics!
  positionStatistics(filter: StatisticsFilterInput): [PositionStatistics!]!
  ranking(input: RankingInput!): [PlayerStatistics!]!
  seasonStatistics(filter: StatisticsFilterInput): SeasonStatistics!
  user(id: String!): User
  users: [User!]!
}

input RankingInput {
  category: String!
  endDate: String
  limit: Int
  position: String
  startDate: String
}

type RefreshResponse {
  accessToken: String!
}

input RefreshTokenInput {
  refreshToken: String!
}

input RegisterInput {
  email: String!
  name: String!
  password: String!
  role: UserRole = VIEWER
}

type SeasonStatistics {
  averageAssistsPerMatch: Float!
  averageGoalsPerMatch: Float!
  mostEffective: [PlayerStatistics!]!
  topAssists: [PlayerStatistics!]!
  topScorers: [PlayerStatistics!]!
  totalAssists: Int!
  totalGoals: Int!
  totalMatches: Int!
}

input StatisticsFilterInput {
  endDate: String
  limit: Int
  position: String
  startDate: String
  userIds: [String!]
}

input UpdateCallUpInput {
  description: String
  isOpen: Boolean
  location: String
  matchDate: String
  maxPlayers: Int
  title: String
}

input UpdateMatchInput {
  date: String
  isFinished: Boolean
  notes: String
  team1Goals: Int
  team1Name: String
  team2Goals: Int
  team2Name: String
}

input UpdatePlayerStatsInput {
  assists: Int
  goals: Int
  redCards: Int
  userId: String!
  yellowCards: Int
}

input UpdateUserInput {
  isActive: Boolean
  name: String
  nickname: String
  position: Position
  role: UserRole
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  isActive: Boolean!
  name: String!
  nickname: String
  position: Position
  role: UserRole!
  updatedAt: DateTime!
}

"""Los roles disponibles para los usuarios"""
enum UserRole {
  ADMIN
  MANAGER
  VIEWER
}